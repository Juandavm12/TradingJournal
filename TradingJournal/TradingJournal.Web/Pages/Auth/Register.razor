@page "/Register"
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IRepository Repository


<EditForm Model="userDTO" OnValidSubmit="CreateUserAsync">
    <DataAnnotationsValidator />


        <div class="card">
        <div class="card-header">
            <span>
                <i class="bi bi-person" /> Register New User
                <button class="btn btn-primary float-end" type="submit">Submit Register</button>
            </span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
            <div class="mb-3">
                <label>First Name :</label>
                <div>
                            <InputText class="form-control" @bind-Value="@userDTO.FirstName"  />
                    <ValidationMessage For="@(() => userDTO.FirstName)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Last Name :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                    <ValidationMessage For="@(() => userDTO.LastName)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Identification Number :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Document" />
                    <ValidationMessage For="@(() => userDTO.Document)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Phone Number :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                    <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                </div>
            </div>
                    <div class="mb-3">                        
                        <div>
                            <InputImg Label="Photo" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
            <div class="mb-3">
                <label>Address :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Address" />
                    <ValidationMessage For="@(() => userDTO.Address)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Email :</label>
                <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Email" />
                            <ValidationMessage For="@(() => userDTO.Email)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Password :</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                    <ValidationMessage For="@(() => userDTO.Password)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Password Confirmation :</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                    <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                </div>
            </div>
                    <div class="w-25 py-2">
                        <label>Trader Type</label>
                        <div>
                            <select class="form-select" @bind="@userDTO.TraderTypesId">
                                <option value="0">-- Select a Trader Type --</option>
                                @if (TraderTypes is not null)
                                {
                                    @foreach (var obj in TraderTypes)
                                    {
                                        <option value="@obj.Id">@obj.Name</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => @userDTO.TraderTypesId)" />
                        </div>
                    </div>
                    
                </div>
    </div>
    </div>
       </div>
   
  

</EditForm>
@code {

    [CascadingParameter]

    BlazoredModalInstance BlazoredModal { get; set; } = default!;

 

    private async Task Charging()
    {

        var responseHTTP = await Repository.GetAsync<List<TraderType>>("/api/TraderTypes/combo");
        TraderTypes = responseHTTP.Response!;


    }


    private List<TraderType> TraderTypes;
    private User Users = new();

    protected override async Task OnInitializedAsync()
    {
        await Charging();
        if (!string.IsNullOrEmpty(userDTO.Photo))
        {
            imageUrl = userDTO.Photo;
            userDTO.Photo = null;
        }
    }

    private string? imageUrl;

    private UserDTO userDTO = new();



    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }


    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsAdmin { get; set; }
    private async Task CreateUserAsync()
    {
        
        userDTO.UserName = userDTO.Email;
        if (IsAdmin)
        {
            userDTO.UserType = UserType.Admin;
        }
        else
        {
            userDTO.UserType = UserType.User;
        }
        var responseHttp = await Repository.PostAsync<UserDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());        
     
        await sweetAlertService.FireAsync("confirm", "Your account has been successfully created. An email has been sent to you with instructions on how to activate your username.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/",true);

    }

    
}