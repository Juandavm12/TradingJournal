@page "/Register"
@using TradingJournal.Shared.DTOs;
@using TradingJournal.Shared.Enums;
@using TradingJournal.Web.Auth;
@using TradingJournal.Web.Repositories
@using TradingJournal.Web.Shared
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IRepository Repository

<h3>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  Register New User
</h3>

<EditForm Model="userDTO" OnValidSubmit="CreateUserAsync">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label>First Name :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.FirstName" />
                    <ValidationMessage For="@(() => userDTO.FirstName)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Last Name :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                    <ValidationMessage For="@(() => userDTO.LastName)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Identification Number :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Document" />
                    <ValidationMessage For="@(() => userDTO.Document)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Phone Number :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                    <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Address :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Address" />
                    <ValidationMessage For="@(() => userDTO.Address)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Email :</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Email" />
                    <ValidationMessage For="@(() => userDTO.Email)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Password :</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                    <ValidationMessage For="@(() => userDTO.Password)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Password Confirmation :</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                    <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                </div>
            </div>
            <div class="mb-3">
                <InputImg Label="Photo" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
            </div>
        </div>
    </div>

    <button class="btn btn-outline-primary" type="submit">Register</button>

</EditForm>
@code {

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(userDTO.Photo))
        {
            imageUrl = userDTO.Photo;
            userDTO.Photo = null;
        }
    }

    private string imageUrl;

    private UserDTO userDTO = new();



    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }

    private async Task CreateUserAsync()
    {

        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.User;
        var responseHttp = await Repository.PostAsync<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/",true);

    }
}