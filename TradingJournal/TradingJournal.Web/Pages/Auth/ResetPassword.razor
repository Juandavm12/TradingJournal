@page "/api/accounts/ResetPassword"

@inject IRepository repository

@inject SweetAlertService sweetAlertService

@inject NavigationManager navigationManager

@if (loading)
{
    <div class="spinner" />
}


<EditForm Model="resetPasswordDTO" OnValidSubmit="ChangePasswordAsync">

    <DataAnnotationsValidator />

    <div class="card">

        <div class="card-header">

            <span>

                <i class="oi oi-key" /> Change Password

                <button class="btn btn-sm btn-dark float-end mx-2" type="submit"><i class="bi bi-check" /> Change Password</button>

            </span>

        </div>

        <div class="card-body">




            <div class="form-floating mb-3">
                <InputText class="form-control" id="floatingInput3" placeholder="Email" @bind-Value="@resetPasswordDTO.Email" />
                <label for="floatingInput3">Email :</label>
                <ValidationMessage For="@(() => resetPasswordDTO.Email)" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" class="form-control" id="floatingInput2" placeholder="New Password" @bind-Value="@resetPasswordDTO.Password" />
                <label for="floatingInput2">New Password :</label>
                <ValidationMessage For="@(() => resetPasswordDTO.Password)" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" class="form-control" id="floatingInput3" placeholder="New Password Confirm" @bind-Value="@resetPasswordDTO.ConfirmPassword" />
                <label for="floatingInput3">New Password Confirm :</label>
                <ValidationMessage For="@(() => resetPasswordDTO.ConfirmPassword)" />
            </div>




        </div>

    </div>

</EditForm>



@code {

    private ResetPasswordDTO resetPasswordDTO = new();

    private bool loading;

    [Parameter]

    [SupplyParameterFromQuery]

    public string Token { get; set; } = "";

    private async Task ChangePasswordAsync()

    {

        loading = true;

        resetPasswordDTO.Token = Token;

        var responseHttp = await repository.PostAsync("/api/accounts/ResetPassword", resetPasswordDTO);

        if (responseHttp.Error)

        {

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);

            loading = false;

            return;

        }

        loading = false;

        await sweetAlertService.FireAsync("Confirm", "Password changed successfully, you can now log in with your new password.", SweetAlertIcon.Info);

        navigationManager.NavigateTo("/");

    }

}