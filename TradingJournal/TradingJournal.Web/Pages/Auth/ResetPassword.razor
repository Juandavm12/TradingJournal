@page "/api/accounts/ResetPassword"

@inject IRepository repository

@inject SweetAlertService sweetAlertService

@inject NavigationManager navigationManager

@if (loading)

{

<div class="spinner" />

}

<div class="row">

<div class="col-6">

<EditForm Model="resetPasswordDTO" OnValidSubmit="ChangePasswordAsync">

<DataAnnotationsValidator />

<div class="card">

<div class="card-header">

<span>

<i class="oi oi-key" /> Change Password

<button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="bi bi-check" /> Change Password</button>

</span>

</div>

<div class="card-body">

<div class="mb-3">

<label>Email:</label>

<div>

<InputText width=“10” @bind-Value="@resetPasswordDTO.Email" />

<ValidationMessage For="@(() => resetPasswordDTO.Email)" />

</div>

</div>

                    <div class="mb-3">
                        <label>New Password :</label>
                        <div>
                            <InputText type="password" @bind-Value="@resetPasswordDTO.Password" />
                            <ValidationMessage For="@(() => resetPasswordDTO.Password)" />
                        </div>
                    </div>


                    <div class="mb-3">
                        <label>Confirm Password :</label>
                        <div>
                            <InputText type="password" @bind-Value="@resetPasswordDTO.ConfirmPassword" />
                            <ValidationMessage For="@(() => resetPasswordDTO.ConfirmPassword)" />
                        </div>
                    </div>



</div>

</div>

</EditForm>

</div>

</div>

@code {

private ResetPasswordDTO resetPasswordDTO = new();

private bool loading;

[Parameter]

[SupplyParameterFromQuery]

public string Token { get; set; } = "";

private async Task ChangePasswordAsync()

{

loading = true;

resetPasswordDTO.Token = Token;

var responseHttp = await repository.PostAsync("/api/accounts/ResetPassword", resetPasswordDTO);

if (responseHttp.Error)

{

var message = await responseHttp.GetErrorMessageAsync();

await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);

loading = false;

return;

}

loading = false;

        await sweetAlertService.FireAsync("Confirm", "Password changed successfully, you can now log in with your new password.", SweetAlertIcon.Info);

navigationManager.NavigateTo("/");

}

}