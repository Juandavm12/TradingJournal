@page "/changePassword"
@inject IRepository repository


@inject SweetAlertService sweetAlertService

@inject NavigationManager navigationManager

@if (loading)

{

    <div class="spinner" />

}

<div class="row">

    <div class="col-6">

        <EditForm Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">

            <DataAnnotationsValidator />

            <div class="card">

                <div class="card-header">

                    <span>

                        <i class="bi bi-key" /> Change Password

                        <a class="btn btn-sm btn-secondary float-end" href="/editUser"><i class="bi bi-arrow-clockwise" /> Return</a>

                        <button class="btn btn-sm btn-dark float-end mx-2" type="submit"><i class="bi bi-floppy2" /> Save Changes</button>

                    </span>

                </div>

                <div class="card-body">




                    <div class="mb-3">

                        <label>Current Password:</label>

                        <div>

                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.CurrentPassword" />

                            <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />

                        </div>

                    </div>

                    <div class="mb-3">

                        <label>New Password:</label>

                        <div>

                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.NewPassword" />

                            <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />

                        </div>

                    </div>

                    <div class="mb-3">

                        <label>New Password Confirm:</label>

                        <div>

                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.Confirm" />

                            <ValidationMessage For="@(() => changePasswordDTO.Confirm)" />

                        </div>

                    </div>

                </div>

            </div>

        </EditForm>

    </div>

</div>



@code {

    private ChangePasswordDTO changePasswordDTO = new();

    private bool loading;


    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task ChangePasswordAsync()

    {

        loading = true;

        var responseHttp = await repository.PostAsync("/api/accounts/changePassword", changePasswordDTO);

        if (responseHttp.Error)

        {

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);

            loading = false;

            return;

        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());

        loading = false;

        navigationManager.NavigateTo("/editUser");

        var toast = sweetAlertService.Mixin(new SweetAlertOptions

            {

                Toast = true,

                Position = SweetAlertPosition.BottomEnd,

                ShowConfirmButton = true,

                Timer = 5000

            });

        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Password Changed Succesfully.");

    }

} 