@page "/changePassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager



<PageTitle>Change Password</PageTitle>


@if (loading)

{

    <div class="spinner" />

}



<EditForm Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">

    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <span>
                <i class="bi bi-key" /> Change Password
                <button class="btn btn-sm btn-dark float-end mx-2" type="submit"><i class="bi bi-floppy2" /> Save Changes</button>
            </span>
        </div>
        <div class="card-body">

            <div class="form-floating mb-3">
                <InputText type="password" class="form-control" id="floatingInput" placeholder="Current Password" @bind-Value="@changePasswordDTO.CurrentPassword" />
                <label for="floatingInput">Current Password :</label>
                <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" class="form-control" id="floatingInput2" placeholder="New Password" @bind-Value="@changePasswordDTO.NewPassword" />
                <label for="floatingInput2">New Password :</label>
                <ValidationMessage For="@(() => changePasswordDTO.NewPassword)" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" class="form-control" id="floatingInput3" placeholder="New Password Confirm" @bind-Value="@changePasswordDTO.Confirm" />
                <label for="floatingInput3">New Password Confirm :</label>
                <ValidationMessage For="@(() => changePasswordDTO.Confirm)" />
            </div>
        </div>
    </div>
</EditForm>

@code {

    private ChangePasswordDTO changePasswordDTO = new();

    private bool loading;


    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task ChangePasswordAsync()
    {
        loading = true;
        var responseHttp = await repository.PostAsync("/api/accounts/changePassword", changePasswordDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }
        await BlazoredModal.CloseAsync(ModalResult.Ok());
        loading = false;
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 5000
            });

        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Password Changed Succesfully.");
    }

} 