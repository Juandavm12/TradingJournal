@page "/EditUser"
@attribute [Authorize(Roles = "Admin , User")]
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inherits LayoutComponentBase
@inject AuthenticationStateProvider GetAuthenticationStateAsync



@if (user is null) 

{ 
    <div class="spinner" />

}
else
{
    
    <EditForm Model="user" OnValidSubmit="SaveUserAsync">

        <DataAnnotationsValidator />      


           <div class="card">
        <div class="card-header">
            <span>
                    <i class="bi bi-person-slash" /> Edit User
                    <button class="btn btn-sm btn-dark  mx-2  float-end" type="submit"><i class="bi bi-floppy2" /> Save Changes</button>
                    <a class="btn btn-sm btn-outline-primary float-end" @onclick=@(() => ShowModal2())><i class="bi bi-key" /> Change Password</a>
            </span>
                        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
            <div class="mb-3">
                            <label>First Name:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Last Name:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Document:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.Document" />
                                <ValidationMessage For="@(() => user.Document)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Phone:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Address:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.Address" />
                                <ValidationMessage For="@(() => user.Address)" />
                            </div>
                        </div>
                    </div>



                    <div class="col-6">
                        <div class="mb-3">
                            <div>
                            <InputImg Label="Photo" ImageSelected="ImageSelected" ImageURL="@imageUrl" />

                        </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
            <span>



            </span>
       
    </EditForm>


}



@code {

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private async Task ShowModal2()

    {
        IModalReference modalReference;


        modalReference = Modal.Show<ChangePassword>();

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadUserAsyc();
        }
    }

    private User user;

    private string imageUrl;


    protected override async Task OnInitializedAsync()

    {

        await LoadUserAsyc();



        if (!string.IsNullOrEmpty(user!.Photo))

        {

            imageUrl = user.Photo;

            user.Photo = null;

        }



    }



    private async Task LoadUserAsyc()

    {

        var responseHTTP = await repository.GetAsync<User>($"/api/accounts");

        if (responseHTTP.Error)

        {

            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)

            {

                navigationManager.NavigateTo("/");

                return;

            }

            var messageError = await responseHTTP.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);

            return;

        }

        user = responseHTTP.Response;

    }



    private void ImageSelected(string imagenBase64)

    {

        user!.Photo = imagenBase64;

        imageUrl = null;

    }



    private async Task SaveUserAsync()
    {
        var responseHttp = await repository.PutAsync<User>("/api/accounts", user!);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
         
    return;
        }
     
    }
}

