@page "/ResendToken"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<PageTitle>Confirm Email</PageTitle>


@if (loading)

{

    <div class="spinner" />

}

<div class="row">

    <div class="col-6">

        <EditForm Model="emailDTO" OnValidSubmit="ResendConfirmationEmailTokenAsync">

            <DataAnnotationsValidator />

            <div class="card">

                <div class="card-header">

                    <span>
                        <i class="bi bi-key" /> Resend Account Activation Email
                        <button class="btn btn-sm btn-dark float-end mx-2" type="submit"><i class="bi bi-loop-square" /> Resend</button>
                    </span>

                </div>
                <div class="card-body">

                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput" placeholder="Email " @bind-Value="@emailDTO.Email" />
                        <label for="floatingInput">Email :</label>
                        <ValidationMessage For="@(() => emailDTO.Email)" />
                    </div>

 
                </div>
            </div>

        </EditForm>

    </div>

</div>

@code {

    private EmailDto emailDTO = new();

    private bool loading;

    private async Task ResendConfirmationEmailTokenAsync()

    {

        loading = true;

        var responseHttp = await repository.PostAsync("/api/accounts/ResedToken", emailDTO);

        if (responseHttp.Error)

        {

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);

            loading = false;

            return;

        }

        loading = false;

        await sweetAlertService.FireAsync("Confirm", "An email has been sent to you with instructions on how to activate your username.", SweetAlertIcon.Info);

        navigationManager.NavigateTo("/");

    }

}