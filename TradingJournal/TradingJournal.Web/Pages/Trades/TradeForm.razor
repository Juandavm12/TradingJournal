@inject IRepository Repository
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="Trade" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />

   <div>
        <label>Trader</label>
        <Dropdown TItem="int" OnSelected="@OnSelected2">
            <InitialTip>Select a Trader</InitialTip>
            <ChildContent>
                @foreach (var trader in Traders!)
                {
                    <DropdownListItem Context="dropContext" Item="@trader.Id">@trader.Name (@trader.Id)</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>
    </div>

    <div>
        <label>Strategy</label>
        <Dropdown TItem="int" OnSelected="@OnSelected">
            <InitialTip>Select a Strategy</InitialTip>
            <ChildContent>
                @foreach (var market in Markets!)
                {
                    <DropdownListItem Context="dropContext" Item="@market.Code">@market.Name</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>
    </div>


    <button class="btn btn-primary" type="submit">Save <i class="bi bi-floppy2"></i></button>


    <button class="btn btn-info" type="reset">Clean <i class="bi bi-x-octagon"></i></button>


    <button class="btn btn-secondary" @onclick="ReturnAction">Return <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>




@code {

    private List<Trader> Traders { get; set; } = new List<Trader>();

    private List<Market> Markets { get; set; } = new List<Market>();

    private void OnSelected(int selection)
    {
        Trade.MarketsCode = selection;

    }

    private void OnSelected2(int selection)
    {
        Trade.TradersId = selection;

    }

    protected async override Task OnInitializedAsync()
    {
        await Charging();

    }

    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<Market>>("/api/Markets");
        Markets = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<Trader>>("/api/traders");
        Traders = response2HTTP.Response!;



    }


    [EditorRequired]
    [Parameter]
    public Trade Trade { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


}