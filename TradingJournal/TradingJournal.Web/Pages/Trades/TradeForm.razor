@inject IRepository Repository
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="Trade" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />

 <div class="w-25 py-2">
        <label>Trader:</label>
        <div>
            <select class="form-select" @bind="@Trade.UsersId">
                <option value="0">-- Select a User --</option>
                @if (Users is not null)
                {
                    @foreach (var obj in Users)
                    {
                        <option value="@obj.Id">@obj.Email</option>
                    }
                }
            </select>       
        </div>
    </div>

  
        <div class="w-25 py-2">
            <label>Markets:</label>
            <div>
                <select class="form-select" @bind="@Trade.MarketsCode">
                    <option value="0">-- Select a Market --</option>
                    @if (Markets is not null)
                    {
                        @foreach (var obj in Markets)
                        {
                            <option value="@obj.Code">@obj.Name</option>
                        }
                    }
                </select>
             
            </div>
        </div>


    <button class="btn btn-primary" type="submit">Save <i class="bi bi-floppy2"></i></button>


    <button class="btn btn-info" type="reset">Clean <i class="bi bi-x-octagon"></i></button>


    <button class="btn btn-secondary" @onclick="ReturnAction">Return <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>




@code {
    private List<User> Users;

    private List<Market> Markets;

    

    protected async override Task OnInitializedAsync()
    {
        await Charging();

    }

    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<Market>>("/api/Markets");
        Markets = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<User>>("/api/Users");
        Users = response2HTTP.Response!;


    }


    [EditorRequired]
    [Parameter]
    public Trade Trade { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


}