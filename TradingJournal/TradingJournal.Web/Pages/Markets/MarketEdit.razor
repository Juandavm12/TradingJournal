@page "/Markets/edit/{MarketCode:int}"
@using TradingJournal.Shared.Entities
@using TradingJournal.Web.Repositories
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]

<h3>Edit Market</h3>

@if (market is null)
{
    <p>the market is null</p>
}
else
{
    <MarketForm Market="market" OnValidSubmit="Edit" ReturnAction="Return" />
    
}

@code {
    [Parameter] 
    public int MarketCode { get; set; }
    private Market market = new();


    protected override async Task OnInitializedAsync()
    {

        var responseHTTP = await repository.GetAsync<Market>($"api/Markets/{MarketCode}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {

                navigationManager.NavigateTo("Markets");
                return;
            }
            else
            {  
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
        
            market = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {

        var responseHTTP = await repository.PutAsync("api/Markets", market);

        if (responseHTTP.Error)
        {
          
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            Return();

        
            var Toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000
                });

            await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Market modified successfully");

        }
    }
       
    
    private void Return()
    {
        navigationManager.NavigateTo("Markets");
    }
}
