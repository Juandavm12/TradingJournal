@inject IRepository Repository
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="Trader" OnValidSubmit="OnValidSubmit">


    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Name</label>
        <div>
            <InputText width="10" @bind-Value="@Trader.Name"></InputText>
            <ValidationMessage For="@(() => @Trader.Name)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Address</label>
        <div>
            <InputText width="10" @bind-Value="@Trader.Address"></InputText>
            <ValidationMessage For="@(() => @Trader.Address)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Cell Number</label>
        <div>
            <InputText width="10" @bind-Value="@Trader.CellNumber"></InputText>
            <ValidationMessage For="@(() => @Trader.CellNumber)" />
        </div>
    </div>


    <div class="w-25 py-2">
        <label>Trader Type</label>
        <div>
            <select class="form-select" @bind="@Trader.TraderTypesId">
                <option value="0">-- Select a Trader Type --</option>
                @if (TraderTypes is not null)
                {
                    @foreach (var obj in TraderTypes)
                    {
                        <option value="@obj.Id">@obj.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => @Trader.TraderTypesId)" />
        </div>
    </div>

      

    <button class="btn btn-primary" type="submit">Save <i class="bi bi-floppy2"></i></button>


    <button class="btn btn-info" type="reset">Clean <i class="bi bi-x-octagon"></i></button>


    <button class="btn btn-secondary" @onclick="ReturnAction">Return <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>




@code {
    private List<TraderType> TraderTypes;

   
    [EditorRequired]
    [Parameter]
    public Trader Trader { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();

    }

    private async Task Charging()
    {

        var responseHTTP = await Repository.GetAsync<List<TraderType>>("/api/TraderTypes");
        TraderTypes = responseHTTP.Response!;


    }


}