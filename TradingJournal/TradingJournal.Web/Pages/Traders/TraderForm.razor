@using TradingJournal.Shared.Entities
@using TradingJournal.Web.Repositories
@inject IRepository Repository
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@using TradingJournal.Web.Shared
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="Trader" OnValidSubmit="OnValidSubmit">


    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Name</label>
        <div>
            <InputText width="10" @bind-Value="@Trader.Name"></InputText>
            <ValidationMessage For="@(() => @Trader.Name)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Address</label>
        <div>
            <InputText width="10" @bind-Value="@Trader.Address"></InputText>
            <ValidationMessage For="@(() => @Trader.Address)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Cell Number</label>
        <div>
            <InputText width="10" @bind-Value="@Trader.CellNumber"></InputText>
            <ValidationMessage For="@(() => @Trader.CellNumber)" />
        </div>
    </div>
        <div>
        <label>Trader Type</label>
        <Dropdown TItem="int" OnSelected="@OnSelected">
            <InitialTip>Select a Trader Type</InitialTip>
            <ChildContent>
                @foreach (var tradertype in TraderTypes!)
                {
                    <DropdownListItem Context="dropContext" Item="@tradertype.Id">@tradertype.Name</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>
    </div>
    


    <button class="btn btn-primary" type="submit">Save <i class="bi bi-floppy2"></i></button>


    <button class="btn btn-info" type="reset">Clean <i class="bi bi-x-octagon"></i></button>


    <button class="btn btn-secondary" @onclick="ReturnAction">Return <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>




@code {

    private List<TraderType> TraderTypes { get; set; } = new List<TraderType>();

    private void OnSelected(int selection)
    {
        Trader.TraderTypesId = selection;

    }

    [EditorRequired]
    [Parameter]
    public Trader Trader { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Charging();

    }

    private async Task Charging()
    {

        var responseHTTP = await Repository.GetAsync<List<TraderType>>("/api/TraderTypes");
        TraderTypes = responseHTTP.Response!;


    }


}