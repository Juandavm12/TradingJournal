@page "/Brokers/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]


<h3><i class="bi bi-plus-circle"></i> Broker Creation</h3>


<BrokerForm Broker="broker" OnValidSubmit="Create" ReturnAction="Return" />


@code {
    private Broker broker = new();


    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;
    private async Task Create()
    {
        var responseHttp = await repository.PostAsync("/api/Brokers", broker);

        if (responseHttp.Error)
        {
            
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok());
            Return();

            var Toast = sweetAlertService.Mixin(new SweetAlertOptions
                {

                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000

                });

            await Toast.FireAsync(icon: SweetAlertIcon.Success, message: "Broker successfully created");
        }
    }



   
    private void Return()
    {
        navigationManager.NavigateTo("/brokers");


    }

}