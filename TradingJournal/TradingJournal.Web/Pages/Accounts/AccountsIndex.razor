@page "/Account"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]
@using TradingJournal.Shared.Entities
@using TradingJournal.Web.Repositories
@using TradingJournal.Web.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3><i class="bi bi-person-rolodex" /> Accounts</h3>
<div class="card">
    <div class="card-header">
        <span>
            <a class="btn btn-primary btn-sm float-start" href="/account/create"><i class="bi bi-plus-circle" /> New Account</a>

        </span>
    </div>

    <div class="card-body">

        <GenericList MyList="Accounts">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>

                            <td>
                                <b>Account Number</b>
                            </td>
                            <td>
                                <b>Broker</b>
                            </td>
                            <td>
                                <b>Trader Id</b>
                            </td>
                            <td>
                                <b>Trader Name</b>
                            </td>
                            <td>
                                <b>Account Type</b>
                            </td>
                            <td>
                                <b>Creation Date</b>
                            </td>
                            <td>
                                <b>Initial Balance</b>
                            </td>

                            <td>
                                <b>Actions</b>
                            </td>

                        </tr>
                        @foreach (var account in Accounts!)
                        {
                            Brokername(@account.BrokersId);
                            TraderName(@account.TradersId);
                            AccTypeName(@account.AccTypesId);

                            <tr>
                                <td>
                                    @account.AccNumber
                                </td>
                                <td>
                                    @brokername
                                </td>
                                <td>
                                    @account.TradersId
                                </td>
                                <td>
                                    @tradername
                                </td>
                                <td>
                                    @acctypename
                                </td>
                                <td>
                                    @account.CreationDate
                                </td>
                                <td>
                                    @account.InitialBalance
                                </td>

                                <td>
                                    <a href="/account/edit/@account.AccNumber" class="btn btn-warning">Edit <i class="bi bi-pencil-square"></i></a>
                                    <button class="btn btn-danger" @onclick=@(() => Delete(account))>Delete <i class="bi bi-trash3"></i></button>
                                </td>

                            </tr>
                        }


                    </tbody>
                </table>

            </Body>

        </GenericList>
    </div>
</div>



@code {

    public string brokername { get; set; }

    public string tradername { get; set; }

    public string acctypename { get; set; }


    public List<Account> Accounts { get; set; }

    public List<Broker> Brokers { get; set; }

    public List<Trader> Traders { get; set; }

    public List<AccType> AccTypes { get; set; }



    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }



    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<Account>>("/api/account");
        Accounts = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<Broker>>("/api/brokers");
        Brokers = response2HTTP.Response!;

        var response3HTTP = await Repository.GetAsync<List<Trader>>("/api/traders");
        Traders = response3HTTP.Response!;

        var response4HTTP = await Repository.GetAsync<List<AccType>>("/api/acctypes");
        AccTypes = response4HTTP.Response!;


    }


    private async Task Delete(Account account)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = $"You really want to delete the Account : {account.AccNumber}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "yes"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/account/{account.AccNumber}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/account");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {

            await Charging();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
            toast.FireAsync(icon: SweetAlertIcon.Success, message: "Account Successfully Deleted.");
        }
    }
    private void Brokername(int? selection)

    {
        brokername = "";
        foreach (var broker in Brokers!)
        {
            if (selection == broker.Id)
            {
                brokername = broker.Name;
            }

        }
    }
    private void TraderName(int? selection)

    {
        tradername = "";
        foreach (var trader in Traders!)
        {
            if (selection == trader.Id)
            {
                tradername = trader.Name;
            }

        }
    }
    private void AccTypeName(int? selection)

    {
        acctypename = "";
        foreach (var acctype in AccTypes!)
        {
            if (selection == acctype.Id)
            {
                acctypename = acctype.Name;
            }

        }
    }
}


