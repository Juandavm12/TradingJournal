@inject IRepository Repository
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="Account" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />

    
    <div class="w-25 py-2">
        <label>Broker:</label>
        <div>
            <select class="form-select"  @bind="@Account.BrokersId">
                <option value="0">-- Select a Broker --</option>
                @if (Brokers is not null)
                {
                    @foreach (var obj in Brokers)
                    {
                        <option value="@obj.Id">@obj.Name</option>
                    }
                }
            </select>

        </div>
    </div>


    <div class="w-25 py-2">
        <label>Trader:</label>
        <div>
            <select class="form-select" @bind="@Account.UsersId">
                <option value="0">-- Select a Trader --</option>
                @if (Users is not null)
                {
                    @foreach (var obj in Users)
                    {
                        <option value="@obj.Id">@obj.Email</option>
                    }
                }
            </select>      
        </div>
    </div>

    <div class="w-25 py-2">
        <label>Account Type</label>
        <div>
            <select class="form-select" @bind="@Account.AccTypesId">
                <option value="0">-- Select a Account Type --</option>
                @if (AccTypes is not null)
                {
                    @foreach (var obj in AccTypes)
                    {
                        <option value="@obj.Id">@obj.Name</option>
                    }
                }
            </select>

        </div>
    </div>

    

    <div class="mb-3">
        <label>Creation Date</label>
        <div>
            <InputDate width="10" @bind-Value="@Account.CreationDate"></InputDate>
            <ValidationMessage For="@(() => @Account.CreationDate)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Initial Balance</label>
        <div>
            <InputNumber width="10" @bind-Value="@Account.InitialBalance"></InputNumber>
            <ValidationMessage For="@(() => @Account.InitialBalance)" />
        </div>
    </div>


    

    <button class="btn btn-primary" type="submit">Save <i class="bi bi-floppy2"></i></button>


    <button class="btn btn-info" type="reset">Clean <i class="bi bi-x-octagon"></i></button>


    <button class="btn btn-secondary" @onclick="ReturnAction">Return <i class="bi bi-arrow-clockwise"></i></button>

</EditForm>




@code {
    private List<Broker> Brokers;

    private List<User> Users;

    private List<AccType> AccTypes;


    protected async override Task OnInitializedAsync()
    {
        await Charging();
        

    }

    private async Task Charging()
    {

        var responseHTTP = await Repository.GetAsync<List<Broker>>("/api/brokers/combo");
        Brokers = responseHTTP.Response!;

        var response2HTTP = await Repository.GetAsync<List<User>>("/api/Users/combo");
        Users = response2HTTP.Response!;

        var response3HTTP = await Repository.GetAsync<List<AccType>>("/api/acctypes/combo");
        AccTypes = response3HTTP.Response!;
            

    }


    [EditorRequired]
    [Parameter]
    public Account Account { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


}