@page "/TradeLogs"
@attribute [Authorize(Roles = "Admin")]
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3><i class="bi bi-graph-down" /> TradeLogs</h3>
<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />
<div class="card">
    <div class="card-header">
        <span>
            <a class="btn btn-primary btn-sm float-start" href="/TradeLogs/create"><i class="bi bi-plus-circle" /> New Trade Log</a>

        </span>
    </div>

    <div class="card-body">

        <GenericList MyList="TradeLogs">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>

                            <td>
                                <b>Trade Number</b>
                            </td>

                            <td>
                                <b>Start Time</b>
                            </td>
                            <td>
                                <b>End Time</b>
                            </td>
                            <td>
                                <b>Asset</b>
                            </td>
                            <td>
                                <b>Risk</b>
                            </td>
                            <td>
                                <b>Pnl</b>
                            </td>
                            <td>
                                <b>Win Rate</b>
                            </td>
                            <td>
                                <b>Risk Reward Rate</b>
                            </td>
                            <td>
                                <b>Commision</b>
                            </td>
                            <td>
                                <b>Net Pnl</b>
                            </td>
                            <td>
                                <b>Account Number</b>
                            </td>
                            <td>
                                <b>Actions</b>
                            </td>

                        </tr>
                        @foreach (var tradelog in TradeLogs!)
                        {

                            <tr>
                                <td>
                                    @tradelog.TradeNumber
                                </td>
                                <td>
                                    @tradelog.StartTime
                                </td>
                                <td>
                                    @tradelog.EndTime
                                </td>
                                <td>
                                    @tradelog.Asset
                                </td>
                                <td>
                                    @tradelog.Risk
                                </td>
                                <td>
                                    @tradelog.Pnl
                                </td>
                                <td>
                                    @tradelog.WinRate
                                </td>
                                <td>
                                    @tradelog.RiskRewardRatio
                                </td>
                                <td>
                                    @tradelog.Comission
                                </td>
                                <td>
                                    @tradelog.NetPnl
                                </td>
                                <td>
                                    @tradelog.AccountsAccNumber
                                </td>


                                <td>
                                    <a href="/TradeLogs/edit/@tradelog.TradeNumber" class="btn btn-outline-primary ">Edit <i class="bi bi-pencil-square"></i></a>
                                    <button class="btn btn-outline-danger" @onclick=@(() => Delete(tradelog))>Delete <i class="bi bi-trash3"></i></button>
                                </td>

                            </tr>
                        }


                    </tbody>
                </table>

            </Body>

        </GenericList>
    </div>
</div>



@code {

    public List<TradeLog> TradeLogs { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }

    private int currentPage = 1;
    private int totalPages;




    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Charging(page);
    }






    private async Task Charging(int page = 1)
    {

        string url1 = $"api/TradeLogs?page={page}";
        string url2 = $"api/TradeLogs/totalPages";
        var responseHppt = await Repository.GetAsync<List<TradeLog>>(url1);
        var responseHppt2 = await Repository.GetAsync<int>(url2);
        TradeLogs = responseHppt.Response!;
        totalPages = responseHppt2.Response!;




    }



 


    private async Task Delete(TradeLog tradelog)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = $"You really want to delete the Trade Log : {tradelog.TradeNumber}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "yes"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/tradelogs/{tradelog.TradeNumber}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/tradelogs");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {

            await Charging();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
            toast.FireAsync(icon: SweetAlertIcon.Success, message: "Trade Log Successfully Deleted.");
        }
    }
}