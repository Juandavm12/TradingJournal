@inject IRepository Repository
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="TradeLog" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />


    <div class="form-floating mb-3">
        <InputDate class="form-control" id="floatingInput" placeholder="Start Time" @bind-Value="@TradeLog.StartTime" />
        <label for="floatingInput">Start Time :</label>
        <ValidationMessage For="@(() => TradeLog.StartTime)" />
    </div>

    <div class="form-floating mb-3">
        <InputDate class="form-control" id="floatingInput2" placeholder="End Time" @bind-Value="@TradeLog.EndTime" />
        <label for="floatingInput2">End Time :</label>
        <ValidationMessage For="@(() => TradeLog.EndTime)" />
    </div>

    <div class="form-floating mb-3">
        <InputText class="form-control" id="floatingInput3" placeholder="Asset" @bind-Value="@TradeLog.Asset" />
        <label for="floatingInput3">Asset :</label>
        <ValidationMessage For="@(() => TradeLog.Asset)" />
    </div>

    <div class="form-floating mb-3">
        <InputNumber class="form-control" id="floatingInput4" placeholder="Risk" @bind-Value="@TradeLog.Risk" />
        <label for="floatingInput4">Risk :</label>
        <ValidationMessage For="@(() => TradeLog.Risk)" />
    </div>


    <div class="form-floating mb-3">
        <InputNumber class="form-control" id="floatingInput5" placeholder="Pnl" @bind-Value="@TradeLog.Pnl" />
        <label for="floatingInput5">Pnl :</label>
        <ValidationMessage For="@(() => TradeLog.Pnl)" />
    </div>

    <div class="form-floating mb-3">
        <InputNumber class="form-control" id="floatingInput6" placeholder="Win Rate" @bind-Value="@TradeLog.WinRate" />
        <label for="floatingInput6">Win Rate :</label>
        <ValidationMessage For="@(() => TradeLog.WinRate)" />
    </div>

    <div class="form-floating mb-3">
        <InputNumber class="form-control" id="floatingInput7" placeholder="Risk Reward Ratio" @bind-Value="@TradeLog.RiskRewardRatio" />
        <label for="floatingInput7">Risk Reward Ratio :</label>
        <ValidationMessage For="@(() => TradeLog.RiskRewardRatio)" />
    </div>

    <div class="form-floating mb-3">
        <InputNumber class="form-control" id="floatingInput8" placeholder="Comission" @bind-Value="@TradeLog.Comission" />
        <label for="floatingInput8">Comission :</label>
        <ValidationMessage For="@(() => TradeLog.Comission)" />
    </div>

    <div class="form-floating mb-3">
        <InputNumber class="form-control" id="floatingInput9" placeholder="Net Pnl" @bind-Value="@TradeLog.NetPnl" />
        <label for="floatingInput9">Net Pnl :</label>
        <ValidationMessage For="@(() => TradeLog.NetPnl)" />
    </div>



    <div class="form-floating mb-3">
        <select class="form-select" id="floatingInput10" placeholder="Account Number " @bind="@TradeLog.AccountsAccNumber">
            <option value="0">-- Select a Account --</option>
            @if (Accounts is not null)
            {
                @foreach (var obj in Accounts)
                {
                    <option value="@obj.AccNumber">@obj.AccNumber</option>
                }
            }
        </select>
        <label for="floatingInput10">Account Number:</label>
        <ValidationMessage For="@(() => TradeLog.AccountsAccNumber)" />
    </div>

       
        
    <button class="btn btn-dark" type="submit">Save <i class="bi bi-floppy2"></i></button>
    <button class="btn btn-info" type="reset">Clean <i class="bi bi-x-octagon"></i></button>
    <button class="btn btn-secondary" @onclick="ReturnAction">Return <i class="bi bi-arrow-clockwise"></i></button>
</EditForm>

@code {
    private List<Account> Accounts;
    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }

    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<Account>>("/api/account/combo");
        Accounts = responseHTTP.Response!;
    }

    [EditorRequired]
    [Parameter]
    public TradeLog TradeLog { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }




}