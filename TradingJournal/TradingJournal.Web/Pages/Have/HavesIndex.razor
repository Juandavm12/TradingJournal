@page "/Haves"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]
@using TradingJournal.Shared.Entities
@using TradingJournal.Web.Repositories
@using TradingJournal.Web.Shared
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3><i class="bi bi-bank" /> Haves</h3>
<div class="card">
    <div class="card-header">
        <span>
            <a class="btn btn-primary btn-sm float-start" href="/haves/create"><i class="bi bi-plus-circle" /> New Have</a>

        </span>
    </div>

    <div class="card-body">

        <GenericList MyList="Haves">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>

                            <td>
                                <b>Have Id</b>
                            </td>
                            <td>
                                <b>Trader</b>
                            </td>
                            <td>
                                <b>Strategy</b>
                            </td>
                            <td>
                                <b>Actions</b>
                            </td>

                        </tr>
                        @foreach (var have in Haves!)
                        {

                            <tr>
                                <td>
                                    @have.Id
                                </td>
                                <td>
                                    @have.TradersId
                                </td>
                                <td>
                                    @have.StrategiesCode
                                </td>
                                 <td>
                                    <a href="/haves/edit/@have.Id" class="btn btn-warning">Edit <i class="bi bi-pencil-square"></i></a>
                                    <button class="btn btn-danger" @onclick=@(() => Delete(have))>Delete <i class="bi bi-trash3"></i></button>
                                </td>

                            </tr>
                        }


                    </tbody>
                </table>

            </Body>

        </GenericList>
    </div>
</div>



@code {

    public List<Have> Haves { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Charging();
    }



    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<Have>>("/api/Haves");
        Haves = responseHTTP.Response!;
    }


    private async Task Delete(Have have)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = $"You really want to delete the Have : {have.Id}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "yes"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"/api/Haves/{have.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/Haves");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {

            await Charging();

            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    ShowConfirmButton = true,
                    Timer = 3000,
                    Position = SweetAlertPosition.BottomEnd
                });
            toast.FireAsync(icon: SweetAlertIcon.Success, message: "Have Successfully Deleted.");
        }
    }
}