﻿
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IRepository Repository

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""></a>

        @if (!@IconMenuActive)
        {
            <a class="navbar-brand" href="">TRADING JOURNAL</a>
        }
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />


    @if (!@IconMenuActive)
    {
        <AuthorizeView>
            <NotAuthorized Context="NotAuthorizedContext">

                <div class="py-4 px-5">
                    <button class="btn btn-outline-info" @onclick="Registrar"><i class="bi bi-card-checklist"></i> Register</button>
                </div>

                <div class="dropdown-center py-3 px-5">
                    <button type="button" class="btn btn-outline-success dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                        <i class="bi bi-box-arrow-right"></i> Sign in
                    </button>
                    <form class="dropdown-menu dropdown-menu-start">
                    <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
                    <DataAnnotationsValidator />
                        <div class="mb-3">
                                <label class="form-label">&nbsp; &nbsp&nbsp; &nbsp&nbsp; &nbsp&nbsp;  Email address</label>
                            <InputText type="email" class="form-control" @bind-Value="@loginDTO.Email" placeholder="email@example.com" />
                                <ValidationMessage For="@(() => loginDTO.Email)" />
                        </div>
                        <div class="mb-3">
                                <label class="form-label">&nbsp; &nbsp&nbsp; &nbsp&nbsp; &nbsp&nbsp; &nbsp&nbsp;  Password</label>
                            <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" placeholder="Password" />
                                <ValidationMessage For="@(() => loginDTO.Password)" />
                        </div>
                        <div class="mb-3">
                          </div>
                            <button class="btn btn-success px-5" type="Submit"><i class="bi bi-box-arrow-right"></i> Login &nbsp; &nbsp; </button>
                        </EditForm>
                    </form>
                </div>
                              
                
                   
            </NotAuthorized>
        </AuthorizeView>



    }
   



<div class="nav-scrollable" >
        <nav class="flex-column">           
            <div class="nav-item px-5">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span>
                @if (!@IconMenuActive)
                {
                    <label>PRUEBA</label>
                }
            </NavLink>
                                       
            </div>



   

        <div class="nav-item px-5">
                <NavLink class="nav-link" href="">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> 
               
            
                @if (!@IconMenuActive)
                {
                <label>Prueba2</label>

                }
            </NavLink>
            </div>

        </nav>

    </div>

<div class="bottom-row d-flex justify-content-end">
        <div class="icon-menu-arrow">
            @if (!@IconMenuActive)
            {
                <span class="bi bi-arrow-left" style="color: black;" @onclick="ToggleIconMenu"></span>
            }
            else
            {
                <span class="bi bi-arrow-right" style="color: black;" @onclick="ToggleIconMenu"></span>
            }
        </div>



    </div>





@code {

    public List<User> Users { get; set; }

    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    private bool showSubMenu = false;

    private void ToggleSubMenu()
    {
        showSubMenu = !showSubMenu;
    }

    private bool IconMenuActive { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ShowIconMenu { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task ToggleIconMenu()
    {
        IconMenuActive = !IconMenuActive;
        await ShowIconMenu.InvokeAsync(IconMenuActive);
    }

    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
 
        var responseHttp = await Repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        else
        {
            await loginService.LoginAsync(responseHttp.Response!.Token);
     

             navigationManager.NavigateTo("/", true);
        }
    }


    private async Task Registrar()
    {
        await loginService.LogoutAsync();
        navigationManager.NavigateTo("/Register");
    }


}