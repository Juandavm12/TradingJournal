﻿
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IRepository Repository

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""></a>

        @if (!@IconMenuActive)
        {
            <a class="navbar-brand" href="">TRADING JOURNAL</a>
        }
    </div>
</div>







<div class="nav-scrollable">
    <nav class="flex-column">
        <div class="nav-item px-5">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span>
                @if (!@IconMenuActive)
                {
                    <label>PRUEBA</label>
                }
            </NavLink>
        </div>

        <div class="nav-item px-5">
            <NavLink class="nav-link" href="">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span>


                @if (!@IconMenuActive)
                {
                    <label>Prueba2</label>

                }
            </NavLink>
        </div>

    </nav>

</div>

<div class="bottom-row d-flex justify-content-end">
    <div class="icon-menu-arrow">
        @if (!@IconMenuActive)
        {
            <span class="bi bi-arrow-left" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
        else
        {
            <span class="bi bi-arrow-right" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
    </div>



</div>





@code {

    private bool showSubMenu = false;

    private void ToggleSubMenu()
    {
        showSubMenu = !showSubMenu;
    }

    private bool IconMenuActive { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ShowIconMenu { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task ToggleIconMenu()
    {
        IconMenuActive = !IconMenuActive;
        await ShowIconMenu.InvokeAsync(IconMenuActive);
    }




  


}