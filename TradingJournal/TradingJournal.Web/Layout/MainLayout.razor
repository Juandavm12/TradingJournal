@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@using TradingJournal.Shared.Entities
@using TradingJournal.Web.Repositories
@using TradingJournal.Web.Shared
@using TradingJournal.Web.Auth
@attribute [Authorize(Roles = "Admin")]
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inherits LayoutComponentBase
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<div class="page">
    <div class="sidebar" style="@IconMenuCssClass">
        <NavMenu ShowIconMenu="ToggleIconMenu" />
    </div>
    <main>
        <ul>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <li><a href="Users"><i class="bi bi-person-slash"></i>&nbsp;  </a></li>
                    <li><a href="Account"><i class="bi bi-person-rolodex"></i>&nbsp; Accounts </a></li>
                    <li><a href="AccTypes"><i class="bi bi-bar-chart-steps"></i>&nbsp; Account Types </a></li>
                    <li><a href="Brokers"><i class="bi bi-piggy-bank-fill"></i>&nbsp; Brokers </a></li>
                    <li><a href="Markets"><i class="bi bi-graph-up-arrow"></i>&nbsp; Markets </a></li>
                    <li><a href="Strategies"><i class="bi bi-clipboard-data"></i>&nbsp; Strategies </a></li>
                    <li><a href="Tradelogs"><i class="bi bi-graph-down"></i>&nbsp; Trade Logs </a></li>
                    <li><a href="TraderTypes"><i class="bi bi-stopwatch"></i>&nbsp; Trader Types </a></li>
                    <li><a href="Traders"><i class="bi bi-person-badge"></i>&nbsp; Traders</a></li>
                    <li class="dropdown">
                        <a href="javascript:void(0)" class="dropbtn"><i class="bi bi-arrow-left-right" aria-hidden="true"></i>&nbsp; Relations </a>
                        <div class="dropdown-content">
                            <a href="haves"><i class="bi bi-bank"></i>&nbsp; Haves </a>
                            <a href="trades"><i class="bi bi-bar-chart-line-fill"></i>&nbsp; Trades </a>
                        </div>
                    </li>
                </Authorized>
            </AuthorizeView>


            <AuthorizeView>
                <NotAuthorized Context="NotAuthorizedContext">
                    <div class="d-flex justify-content-end">
                        <div class="p-2"><button class="btn btn-success" @onclick="Registrar"><i class="bi bi-card-checklist"></i> Register</button></div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </ul>

        <AuthorizeView>
            <Authorized>
                <div class="d-flex justify-content-end">
                    <div class="p-2"><button class="btn btn-dark" disabled> @context.User.Identity!.Name <i class="bi bi-person"></i></button></div>
                    @if (!string.IsNullOrEmpty(photoUser))
                    {
                        <div class="mx-2">
                            <img src="@photoUser" width="50" height="50" style="border-radius:50%" />
                        </div>
                    }
                    <div class="p-2"><button class="btn btn-info" @onclick="Logout" @onclick:preventDefault><i class="bi bi-box-arrow-left"></i> Logout </button></div>
                </div>
            </Authorized>
        </AuthorizeView>
    

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string photoUser;
    private string UserName;


    public List<User> Users { get; set; }


    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        UserName = user.Identity.Name;
        await Charging();
         PhotoGet();
    }



    private async Task Charging()
    {
        var responseHTTP = await Repository.GetAsync<List<User>>("/api/users");
        Users = responseHTTP.Response!;

    }

    private bool _iconMenuActive { get; set; }
    private string IconMenuCssClass => _iconMenuActive ? "width: 80px;" : null;

    protected void ToggleIconMenu(bool iconMenuActive)
    {
        _iconMenuActive = iconMenuActive;
    }

    private async Task Logout()
    {
        await loginService.LogoutAsync();
        navigationManager.NavigateTo("/", true);
    }


    private async Task Registrar()
    {
        await loginService.LogoutAsync();
        navigationManager.NavigateTo("/Register");
    }

    private void PhotoGet()

    {
        photoUser = "";
        foreach (var username in Users!)
        {
            if (UserName.Equals(username.Email))
            {
                photoUser = username.Photo;
            }

        }
    }

}