@attribute [Authorize(Roles = "Admin")]
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inherits LayoutComponentBase
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@using Blazored.Modal
@using Blazored.Modal.Services

<div class="page">
    <div class="sidebar" style="@IconMenuCssClass">
        <NavMenu ShowIconMenu="ToggleIconMenu" />
    </div>
    <main>

        <AuthorizeView>
            <NotAuthorized Context="NotAuthorizedContext">

                <nav class="navbar  navbar-expand-lg bg-secondary  bg-opacity-50">
                    <div class="container-fluid">
                       
                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav me-auto mb-2 mb-lg-0">                              

                            </ul>
                            <div class="d-flex justify-content-end">
                                <div class="px-2">
                                    <button class="btn btn-outline-primary" @onclick=@(() => ShowModal3())><i class="bi bi-card-checklist"></i> Sign in</button>
                                </div>
                                <div class="px-4">
                                    <button class="btn btn-outline-dark" @onclick=@(() => ShowModal2())><i class="bi bi-card-checklist"></i> Register</button>
                                </div>
                            </div>
                        </div>
                    </div>

            

                </nav>

            </NotAuthorized>
        </AuthorizeView>
       
            <AuthorizeView Roles="Admin">
                <Authorized>
                <nav class="navbar  navbar-expand-lg bg-secondary  bg-opacity-50">
                        <div class="container-fluid">                        
                            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="navbar-toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="Users"><i class="bi bi-person-badge"></i>&nbsp; Users  </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="Account"><i class="bi bi-person-rolodex"></i>&nbsp; Accounts </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="AccTypes"><i class="bi bi-bar-chart-steps"></i>&nbsp; Account Types </a>
                                        </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="Brokers"><i class="bi bi-piggy-bank-fill"></i>&nbsp; Brokers </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="Markets"><i class="bi bi-graph-up-arrow"></i>&nbsp; Markets </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="Strategies"><i class="bi bi-clipboard-data"></i>&nbsp; Strategies </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="Tradelogs"><i class="bi bi-graph-down"></i>&nbsp; Trade Logs </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" aria-current="page" href="TraderTypes"><i class="bi bi-stopwatch"></i>&nbsp; Trader Types </a>
                                    </li>
                                                                        
                                    <li class="nav-item dropdown">
                                        <a class="nav-link dropdown-toggle" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="bi bi-arrow-left-right" aria-hidden="true"></i>&nbsp; Relations </a>
                                        <ul class="dropdown-menu">                                          
                                            <li><a class="dropdown-item" href="haves"><i class="bi bi-bank"></i>&nbsp; Haves </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item" href="trades"><i class="bi bi-bar-chart-line-fill"></i>&nbsp; Trades </a></li>
                                        </ul>
                                    </li>
                                    
                                </ul>
                            </div>
                        </div>

                    <div class="d-flex justify-content-end">
                        @if (!string.IsNullOrEmpty(photoUser))
                        {
                            <div class="btn-group dropstart">
                                <button type="button" class="dropdown-toggle btn-outline-secondary" data-bs-toggle="dropdown" aria-expanded="false">
                                    <img src="@photoUser" width="50" height="50" style="border-radius:20%" />
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="">@context.User.Identity!.Name</a></li>
                                    <li><button class="dropdown-item" @onclick=@(() => ShowModal()) type="button"><i class="bi bi-person-slash"></i>&nbsp; &nbsp; Edit User</button></li>
                                    <li><button class="dropdown-item" @onclick="Logout" type="button"><i class="bi bi-box-arrow-left"></i>&nbsp; &nbsp; Logout</button></li>
                                </ul>
                            </div>

                        }

                        @if (string.IsNullOrEmpty(photoUser))
                        {
                            <div class="btn-group dropstart">
                                <button type="button" class="dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-person"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="">@context.User.Identity!.Name</a></li>
                                    <li><button class="dropdown-item" @onclick=@(() => ShowModal()) type="button"><i class="bi bi-person-slash"></i>&nbsp; &nbsp; Edit User</button></li>
                                    <li><button class="dropdown-item" @onclick="Logout" type="button"><i class="bi bi-box-arrow-left"></i>&nbsp; &nbsp; Logout</button></li>
                                </ul>
                            </div>

                        }

                    </div>
                    </nav>                 
                </Authorized>
            </AuthorizeView>                   


            <AuthorizeView Roles="User">
                <Authorized>
                <nav class="navbar  navbar-expand-lg bg-secondary  bg-opacity-50">
                    <div class="container-fluid">
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                               
                                <li class="nav-item">
                                    <a class="nav-link active" aria-current="page" href=""><i class="bi bi-graph-down"></i>&nbsp; Test </a>
                                </li>
                                
                            </ul>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        @if (!string.IsNullOrEmpty(photoUser))
                        {
                            <div class="btn-group dropstart">
                                <button type="button" class="dropdown-toggle btn-outline-secondary" data-bs-toggle="dropdown" aria-expanded="false">
                                    <img src="@photoUser" width="50" height="50" style="border-radius:20%" />
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="">@context.User.Identity!.Name</a></li>
                                    <li><button class="dropdown-item" @onclick=@(() => ShowModal()) type="button"><i class="bi bi-person-slash"></i>&nbsp; &nbsp; Edit User</button></li>
                                    <li><button class="dropdown-item" @onclick="Logout" type="button"><i class="bi bi-box-arrow-left"></i>&nbsp; &nbsp; Logout</button></li>
                                </ul>
                            </div>

                        }

                        @if (string.IsNullOrEmpty(photoUser))
                        {
                            <div class="btn-group dropstart">
                                <button type="button" class="dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-person"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="">@context.User.Identity!.Name</a></li>
                                    <li><button class="dropdown-item" @onclick=@(() => ShowModal()) type="button"><i class="bi bi-person-slash"></i>&nbsp; &nbsp; Edit User</button></li>
                                    <li><button class="dropdown-item" @onclick="Logout" type="button"><i class="bi bi-box-arrow-left"></i>&nbsp; &nbsp; Logout</button></li>
                                </ul>
                            </div>

                        }

                    </div>
                </nav>

            </Authorized>
            </AuthorizeView>
           
        

      

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private async Task ShowModal()
    {
        IModalReference modalReference;
        modalReference = Modal.Show<Pages.Auth.EditUser>();

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
           
        }
    }

    private bool _iconMenuActive { get; set; }
    private string IconMenuCssClass => _iconMenuActive ? "width: 80px;" : null;

    protected void ToggleIconMenu(bool iconMenuActive)
    {
        _iconMenuActive = iconMenuActive;
    }



    private string photoUser;
   
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;
    protected async override Task OnParametersSetAsync()

    {
        var authenticationState = await authenticationStateTask;

        var photoClaim = authenticationState.User.Claims.FirstOrDefault(x => x.Type == "Photo"); ;  
              
        if (photoClaim is not null)

        {
            photoUser = photoClaim.Value;
            
        }

    }


    private async Task Logout()
    {
        await loginService.LogoutAsync();
        navigationManager.NavigateTo("/", true);
    }

     
    private void Edit()
    {
      
            navigationManager.NavigateTo("/edituser", true);
        }




    private async Task ShowModal2()
    {
        IModalReference modalReference;

        modalReference = Modal.Show<Pages.Auth.Register>();

        var result = await modalReference.Result;
        if (result.Confirmed)
        {

        }
    }

    private async Task ShowModal3()
    {
        IModalReference modalReference;

        modalReference = Modal.Show<Pages.Auth.Login>();

        var result = await modalReference.Result;
        if (result.Confirmed)
        {

        }
    }
}