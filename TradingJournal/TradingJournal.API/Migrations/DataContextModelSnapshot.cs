// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingJournal.API.Data;

#nullable disable

namespace TradingJournal.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TradingJournal.Shared.Entities.AccType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AccTypes");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccTypesId")
                        .HasColumnType("int");

                    b.Property<int>("BrokersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("InitialBalance")
                        .HasColumnType("float");

                    b.Property<int>("TradersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccTypesId");

                    b.HasIndex("BrokersId");

                    b.HasIndex("TradersId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Broker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Have", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StrategiesId")
                        .HasColumnType("int");

                    b.Property<int>("TradersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StrategiesId");

                    b.HasIndex("TradersId");

                    b.ToTable("Haves");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Strategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Strategys");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MarketsId")
                        .HasColumnType("int");

                    b.Property<int>("TradersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketsId");

                    b.HasIndex("TradersId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.TradeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Comission")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("NetPnl")
                        .HasColumnType("float");

                    b.Property<double>("Pnl")
                        .HasColumnType("float");

                    b.Property<double>("Risk")
                        .HasColumnType("float");

                    b.Property<double>("RiskRewardRatio")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("WinRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TradeLogs");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Trader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CellNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TraderTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TraderTypesId");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.TraderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TraderType");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Account", b =>
                {
                    b.HasOne("TradingJournal.Shared.Entities.AccType", "AccTypes")
                        .WithMany()
                        .HasForeignKey("AccTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingJournal.Shared.Entities.Broker", "Brokers")
                        .WithMany()
                        .HasForeignKey("BrokersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingJournal.Shared.Entities.Trader", "Traders")
                        .WithMany()
                        .HasForeignKey("TradersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccTypes");

                    b.Navigation("Brokers");

                    b.Navigation("Traders");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Have", b =>
                {
                    b.HasOne("TradingJournal.Shared.Entities.Strategy", "Strategies")
                        .WithMany("Haves")
                        .HasForeignKey("StrategiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingJournal.Shared.Entities.Trader", "Traders")
                        .WithMany("Haves")
                        .HasForeignKey("TradersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategies");

                    b.Navigation("Traders");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Trade", b =>
                {
                    b.HasOne("TradingJournal.Shared.Entities.Market", "Markets")
                        .WithMany("Trades")
                        .HasForeignKey("MarketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingJournal.Shared.Entities.Trader", "Traders")
                        .WithMany("Trades")
                        .HasForeignKey("TradersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Markets");

                    b.Navigation("Traders");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Trader", b =>
                {
                    b.HasOne("TradingJournal.Shared.Entities.TraderType", "TraderTypes")
                        .WithMany()
                        .HasForeignKey("TraderTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TraderTypes");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Market", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Strategy", b =>
                {
                    b.Navigation("Haves");
                });

            modelBuilder.Entity("TradingJournal.Shared.Entities.Trader", b =>
                {
                    b.Navigation("Haves");

                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
